{"version":3,"sources":["../../src/utils/source-handler.js"],"names":["sourceLoaderPath","join","__dirname","ensureToBeArray","maybeArray","Array","isArray","isDirectory","filename","statSync","isValidFile","transformers","some","test","eval","findValidFiles","source","pipe","filter","either","chain","subFiles","readFileSync","map","subFile","rxSep","RegExp","sep","getPropPath","sources","reduce","f","replace","extname","split","filesToTreeStructure","files","cleanedSources","filesTree","propLens","lensPath","set","stringifyObject","nodePath","nodeValue","depth","rest","indent","repeat","kvStrings","toPairs","kv","valueString","stringify","lazyLoadWrapper","filePath","isLazyLoadWrapper","loaderString","toUriPath","shouldLazyLoad","lazyLoad","params","shouldBeLazy","cond","n","obj","fileInnerContent","fileContent","writeFileSync","objectKVString","T","isAbsolute","process","cwd","exports","generate","undefined","is","Object","mapObjIndexed","value","validFiles","options","traverse","fn","forEach","key","transformerIndex","index","transformer","parsedMarkdown","require","use"],"mappings":"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","file":"source-handler.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-06-07 11:19:22\n * @Last modified by:   yzf\n * @Last modified time: 2017-06-07 11:19:24\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport R from 'ramda';\nimport { escapeWinPath, toUriPaht } from './escape-win-path';\n\nconst sourceLoaderPath = path.join(__dirname, 'source-loader');\n\nfunction ensureToBeArray(maybeArray) {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n\nfunction isDirectory(filename) {\n  return fs.statSync(filename).isDirectory();\n}\n\nconst isValidFile = transformers => filename => transformers.some(({ test }) => eval(test).test(filename));\n\nfunction findValidFiles(source, transformers) {\n  return R.pipe(\n    R.filter(R.either(isDirectory, isValidFile(transformers))),\n    R.chain(filename => {\n      if (isDirectory(filename)) {\n        const subFiles = fs.readFileSync(filename)\n          .map(subFile => path.join(filename, subFile));\n          return findValidFiles(subFiles, transformers);\n      }\n      return [filename];\n    })\n  )(source);\n}\n\nconst rxSep = new RegExp(`[${escapeWinPath(path.sep)}.]`);\nfunction getPropPath(filename, sources) {\n  return sources.reduce(\n    (f, source) => f.replace(source, ''),\n    filename.replace(new RegExp(`${path.extname(filename)}$`), ''),\n  ).replace(/^\\.?(?:\\\\|\\/)+/, '').split(rxSep);\n}\n\nfunction filesToTreeStructure(files, sources) {\n  const cleanedSources = sources.map(source => source.replace(/^\\.?(?:\\\\|\\/)/, ''));\n  const filesTree = files.reduce((filesTree, filename) => {\n    const propLens = R.lensPath(getPropPath(filename, cleanedSources));\n    return R.set(propLens, filename, filesTree);\n  }, {});\n  return filesTree;\n}\n\nfunction stringifyObject({ nodePath, nodeValue, depth, ...rest }) {\n  const indent = '  '.repeat(depth);\n  const kvStrings = R.pipe(\n    R.toPairs,\n    R.map((kv) => {\n      const valueString = stringify({\n        ...rest,\n        nodePath: `${nodePath}/${kv[0]}`,\n        nodeValue: kv[1],\n        depth: depth + 1,\n      });\n      return `${indent}  '${kv[0]}': ${valueString},`;\n    }),\n  )(nodeValue);\n  return kvStrings.join('\\n');\n}\n\nfunction lazyLoadWrapper({\n  filePath,\n  filename,\n  isLazyLoadWrapper,\n}) {\n  const loaderString = isLazyLoadWrapper ? '' : `${sourceLoaderPath}!`;\n  return\n    `function () {\\n\n      return new Promise(function (resolve) {\\n\n        require.ensure([], function (require) {\\n\n            resolve(require('${escapeWinPath(loaderString)}${escapeWinPath(filePath)}'));\\n\n          }, '${toUriPath(filename)}');\\n\n      });\\n\n    }`;\n}\n\nfunction shouldLazyLoad(nodePath, nodeValue, lazyLoad) {\n  if (typeof lazyLoad === 'function') {\n    return lazyLoad(nodePath, nodeValue);\n  }\n\n  return typeof nodeValue === 'object' ? false : lazyLoad;\n}\n\nfunction stringify(params) {\n  const {\n    nodePath = '/',\n    nodeValue,\n    lazyLoad,\n    depth = 0,\n  } = params;\n  const indent = '  '.repeat(depth);\n  const shouldBeLazy = shouldLazyLoad(nodePath, nodeValue, lazyLoad);\n  return R.cond([\n    [n => typeof n === 'object', (obj) => {\n      if (shouldBeLazy) {\n        const filePath = `${path.join(\n          __dirname, '..', '..', 'tmp',\n          nodePath.replace(/^\\/+/, '').replace(/\\//g, '-'),\n        )}.index.js`;\n        const fileInnerContent = stringifyObject({\n          ...params,\n          nodeValue: obj,\n          lazyLoad: false,\n          depth: 1,\n        });\n        const fileContent = `module.exports = {\\n${fileInnerContent}\\n}`;\n        fs.writeFileSync(filePath, fileContent);\n        return lazyLoadWrapper({\n          filePath,\n          filename: nodePath.replace(/^\\/+/, ''),\n          isLazyLoadWrapper: true,\n        });\n      }\n      const objectKVString = stringifyObject({\n        ...params,\n        nodePath,\n        depth,\n        nodeValue: obj,\n      });\n      return `{\\n${objectKVString}\\n${indent}}`;\n    }],\n    [R.T, (filename) => {\n      const filePath = path.isAbsolute(filename) ?\n              filename : path.join(process.cwd(), filename);\n      if (shouldBeLazy) {\n        return lazyLoadWrapper({ filePath, filename });\n      }\n      return `require('${escapeWinPath(sourceLoaderPath)}!${escapeWinPath(filePath)}')`;\n    }],\n  ])(nodeValue);\n}\n\nexports.generate = function generate(source, transformers = []) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n  if (R.is(Object, source) && !Array.isArray(source)) {\n    return R.mapObjIndexed(value => generate(value, transformers), source);\n  }\n  const sources = ensureToBeArray(source);\n  const validFiles = findValidFiles(sources, transformers);\n  const filesTree = filesToTreeStructure(validFiles, sources);\n  return filesTree;\n}\n\nexports.stringify = (\n  filesTree,\n  options = {}, /* { lazyLoad, plugins, transformers } */\n) => stringify({ nodeValue: filesTree, ...options });\n\nexports.traverse = function traverse(filesTree, fn) {\n  Object.keys(filesTree).forEach((key) => {\n    const value = filesTree[key];\n    if (typeof value === 'string') {\n      fn(value);\n      return;\n    }\n\n    traverse(value, fn);\n  });\n};\n\nexports.process = (\n  filename,\n  fileContent,\n  transformers = []\n) => {\n  let transformerIndex = -1;\n  transformers.some(({ test }, index) => {\n    transformerIndex = index;\n    return eval(test).test(filename);\n  });\n  const transformer = transformers[transformerIndex];\n\n  const parsedMarkdown = require(transformer.use)(filename, fileContent);\n  return parsedMarkdown;\n};\n"]}