{"version":3,"sources":["../../src/utils/scheduler.js"],"names":["executorsCount","cpus","length","createExecutors","count","executors","executor","fork","join","__dirname","execArgv","setMaxListeners","push","module","exports","tasksQueue","launch","task","pop","callback","send","once","result","queue","jobDone","forEach","kill"],"mappings":";;AAOA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,aAAGC,IAAH,GAAUC,MAAV,GAAmB,CAA1C,C,CAXA;;;;;;;AAaA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAMC,YAAY,EAAlB;AACA,SAAMA,UAAUH,MAAV,GAAmBE,KAAzB,EAAgC;AAC9B,QAAME,WAAW,wBAAaC,IAAb,CAAkB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAlB,EAAyD,EAAzD,EAA6D,EAACC,UAAU,CAAC,aAAD,CAAX,EAA7D,CAAjB;AACAJ,aAASK,eAAT,CAAyB,CAAzB;AACAN,cAAUO,IAAV,CAAeN,QAAf;AACD;AACD,SAAOD,SAAP;AACD;;AAEDQ,OAAOC,OAAP,GAAiB,YAAW;AAC1B,MAAMT,YAAYF,gBAAgBH,cAAhB,CAAlB;AACA,MAAMe,aAAa,EAAnB;AACA,WAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,QAAMX,WAAWD,UAAUa,GAAV,EAAjB;AACA,QAAMC,WAAWF,KAAKE,QAAL,EAAjB;AACAb,aAASc,IAAT,CAAcH,IAAd;AACAX,aAASe,IAAT,CAAc,SAAd,EAAyB,kBAAU;AACjCF,eAAS,IAAT,EAAeG,MAAf;AACAjB,gBAAUO,IAAV,CAAeN,QAAf,EAFiC,CAEP;AAC1B,UAAIS,WAAWb,MAAX,GAAoB,CAAxB,EAA2B;AACzBc,eAAOD,WAAWG,GAAX,EAAP;AACD;AACF,KAND;AAOD;;AAED,SAAO;AACLK,WAAO,qBAAQ;AACb,UAAIlB,UAAUH,MAAV,IAAoB,CAAxB,EAA2B;AACzBa,mBAAWH,IAAX,CAAgBK,IAAhB;AACA;AACD;AACDD,aAAOC,IAAP;AACD,KAPI;AAQLO,aAAS;AAAA,aAAMnB,UAAUoB,OAAV,CAAkB;AAAA,eAAYnB,SAASoB,IAAT,EAAZ;AAAA,OAAlB,CAAN;AAAA;AARJ,GAAP;AAUD,CA1BD","file":"scheduler.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-06-07 17:37:42\n * @Last modified by:   yzf\n * @Last modified time: 2017-06-07 17:37:50\n */\n\nimport os from 'os';\nimport path from 'path';\nimport childProcess from 'child_process';\n\nconst executorsCount = os.cpus().length - 1;\n\nfunction createExecutors(count) {\n  const executors = [];\n  while(executors.length < count) {\n    const executor = childProcess.fork(path.join(__dirname, './executor.js'), [], {execArgv: ['--debug-brk']});\n    executor.setMaxListeners(1);\n    executors.push(executor);\n  }\n  return executors;\n}\n\nmodule.exports = function() {\n  const executors = createExecutors(executorsCount);\n  const tasksQueue = [];\n  function launch(task) {\n    const executor = executors.pop();\n    const callback = task.callback();\n    executor.send(task);\n    executor.once('message', result => {\n      callback(null, result);\n      executors.push(executor); // 任务完成\n      if (tasksQueue.length > 0) {\n        launch(tasksQueue.pop());\n      }\n    });\n  }\n\n  return {\n    queue: task => {\n      if (executors.length <= 0) {\n        tasksQueue.push(task);\n        return;\n      }\n      launch(task);\n    },\n    jobDone: () => executors.forEach(executor => executor.kill())\n  }\n}\n"]}